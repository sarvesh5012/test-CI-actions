#!/usr/bin/env python3
import argparse
import client
import json
import os
import requests


def get_args():
    """Get arguments"""
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-a",
        "--action",
        help="action for script to perform",
        required=True,
        dest="action",
    )
    parser.add_argument(
        "-o", "--vco", help="vco host for actions", required=True, dest="vcoHost"
    )
    parser.add_argument("-p", "--pool", help="gateway pool", dest="poolName")
    parser.add_argument(
        "-s", "--site", help="site name for actions", required=True, dest="siteName"
    )
    parser.add_argument(
        "-v", "--vcg", help="vcg name for actions", required=True, dest="vcgName"
    )
    parser.add_argument(
        "--ipv4-address", help="External IPv4 Address of VCG", default=None
    )
    parser.add_argument(
        "--ipv6-address", help="External IPv6 Address of VCG", default=None
    )
    args = parser.parse_args()
    return args


def main():
    args = get_args()
    path = os.path.dirname(os.path.realpath(__file__))
    with open(f"{path}/pops.json") as file:
        data = file.read()
    pops = json.loads(data)

    if args.vcoHost is None:
        print("Error: Need vco specified")
        exit(-1)

    vcclient = client.VcoRequestManager(hostname=args.vcoHost, verify_ssl=True)
    if "VC_USERNAME" not in os.environ or "VC_PASSWORD" not in os.environ:
        print("Error: please set VC_USERNAME and VC_PASSWORD env vars respectively")

    # don't need to check, will fail if auth does
    vcclient.authenticate(
        os.environ["VC_USERNAME"], os.environ["VC_PASSWORD"], is_operator=True
    )

    if args.action is not None:
        action = args.action
    else:
        action = "create"

    if args.poolName is not None:
        pool = args.poolName
    else:
        pool = "Default Pool"
    if args.vcgName is not None:
        vcgName = args.vcgName
    else:
        print("Error: please define vcg name")
        exit(-1)

    if args.siteName is not None:
        siteName = args.siteName
    else:
        print("Error: please define site name")
        exit(-1)

    # if pool is defined fetch pool
    poolId = 1  # default pool is always 1 afaik
    for item in vcclient.call_api("network/getNetworkGatewayPools", {"networkId": 0}):
        if pool == item["name"]:
            poolId = item["id"]

    ipSuffix = vcgName.split("-")[0].lstrip("vcg")

    if args.ipv4_address is not None:
        ipv4_address = args.ipv4_address
    else:
        ipv4_address = pops[siteName]["vcmp_subnet"].rstrip("0") + ipSuffix

    if args.ipv6_address is not None:
        ipv6_address = args.ipv6_address
    else:
        ipv6_address = pops[siteName]["vcmp_ip6_subnet"] + "::" + ipSuffix

    template = {
        "endpointPkiMode": "CERTIFICATE_OPTIONAL",
        "gatewayPoolId": poolId,
        "ipAddress": ipv4_address,
        "ipV6Address": ipv6_address,
        "isLoadBalanced": 0,
        "name": vcgName,
        "networkId": 1,
        "serviceState": "IN_SERVICE",
        "site": {
            "contactEmail": "no-reply@vmware.com",
            "contactName": "VMware Support",
        },
    }
    syslogTemplate = {
        "id": 0,
        "syslog": {
            "facilityCode": "local0",
            "collectors": [
                {
                    "host": "127.0.0.1",
                    "protocol": "TCP",
                    "port": 6514,
                    "severity": "INFO",
                }
            ],
        },
    }

    # Get VCG details
    vcg_info = {}
    for item in vcclient.call_api("/network/getNetworkGateways", {"networkId": 0}):
        if (item["name"]) == vcgName:
            vcg_info = item
            break

    if action == "get":
        print(json.dumps(vcg_info, indent=4))
        return

    # Provision VCG in VCO UI
    if action == "create":
        if not vcg_info:
            vcclient.call_api("/gateway/gatewayProvision", template)
            for item in vcclient.call_api(
                "/network/getNetworkGateways", {"networkId": 0}
            ):
                if (item["name"]) == vcgName:
                    vcg_info = item
                    break
            syslogTemplate["id"] = vcg_info["id"]
            vcclient.call_api("/gateway/updateGatewayAttributes", syslogTemplate)
            print(vcg_info["activationKey"])
            return
        else:
            if (
                vcg_info["gatewayState"] == "NEVER_ACTIVATED"
                and vcg_info["activationState"] == "PENDING"
                and vcg_info["ipAddress"] == ipv4_address
                and vcg_info["ipV6Address"] == ipv6_address
            ):
                print(vcg_info["activationKey"])
                return
            else:
                print(f"Error: VCG {vcgName} already exists in VECO")
                print(json.dumps(vcg_info, indent=4))
                exit(1)

    if action == "upgrade":
        if not vcg_info:
            print(f"Error: VCG {vcgName} doesn't exists in VECO, Validate !!")
            exit(1)
        else:
            if (
                vcg_info["ipAddress"] == ipv4_address
                and vcg_info["ipV6Address"] == ipv6_address
            ):
                print(vcg_info["activationKey"])
            else:
                print(f"Error: VCG {vcgName} already exists in VECO with different IP details")
                print(json.dumps(vcg_info, indent=4))
                exit(1)

    # Delete VCG in VCO UI
    if action == "delete":
        if vcg_info:
            vcclient.call_api(
                "/gatewayPool/removeGatewayPoolGateway",
                {"gatewayPoolId": poolId, "gatewayId": item["id"]},
            )
            vcclient.call_api("/gateway/deleteGateway", {"id": item["id"]})
        else:
            print(f"VCG {vcgName} not found, nothing to be deleted,. skipping")
            return

    # Update SystemProperty in case of upgrade and migrate
    if action in ("upgrade", "migrate"):
        method = "/systemProperty/updateSystemProperty"
        headers = {"Content-Type": "application/json", "Accept": "application/json"}
        # Set gateway.activation.validate.source to "false"
        data_validate_source = {
            "name": "gateway.activation.validate.source",
            "_update": {"value": "false"},
        }
        try:
            response_source = vcclient.call_api(method, data_validate_source)
        except requests.exceptions.HTTPError as e:
            msg = f"Error occurred while setting gateway.activation.validate.source on {args.vcoHost}: {e}"
            raise RuntimeError(msg) from e

        # Set gateway.activation.validate.deviceId to "false"
        data_validate_deviceId = {
            "name": "gateway.activation.validate.deviceId",
            "_update": {"value": "false"},
        }
        try:
            response_device_id = vcclient.call_api(method, data_validate_deviceId)
        except requests.exceptions.HTTPError as e:
            msg = f"Error occurred while setting gateway.activation.validate.deviceId on {args.vcoHost}: {e}"
            raise RuntimeError(msg) from e

    # Validate the VCG activation status post create or delete
    if action in ("delete", "migrate"):
        vcgs = vcclient.call_api("/network/getNetworkGateways", {"networkId": 0})
        vcg_exists = any(item["name"] for item in vcgs if item["name"] == vcgName)

        if action == "migrate":
            if vcg_exists:
                for item in vcgs:
                    if (item["name"]) == vcgName:
                        print(item["activationKey"])
            else:
                print(f"Error: VCG {vcgName} not found in VECO {args.vcoHost}")
                exit(1)

        elif action == "delete" and vcg_exists:
            print(f"Error: VCG {vcgName} deletion did not complete as expected")
            exit(1)


if __name__ == "__main__":
    main()
